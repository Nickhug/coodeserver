VVS Authentication Flow (WebSocket-based Monorepo Implementation)
=================================================================

This diagram outlines the authentication flow between the VVS client and the coodeserver monorepo architecture.

Components:
-----------
*   VVS Client: The Void Editor application running locally (Electron/VS Code context).
*   Browser: The user's web browser opened for authentication.
*   Web App: The Next.js application in `apps/web/`.
*   WebSocket Server: The dedicated WebSocket server in `apps/ws-server/`.
*   Clerk: Third-party authentication service.
*   Packages:
    *   `@repo/auth`: Authentication utilities shared between applications.
    *   `@repo/types`: TypeScript types for communication protocols.

Flow Steps:
-----------

1.  **Login Initiated (VVS Client)**
    *   User clicks "Login" in VVS.
    *   `VoidAuthService.login()` is called.

2.  **WebSocket Connection (VVS Client -> WebSocket Server)**
    *   VVS Client attempts to establish a WebSocket connection to `ws://<server_url>/ws`.
    *   WebSocket Server (in `apps/ws-server/`) receives connection, generates a unique `connectionId`.
    *   WebSocket Server sends `{ type: 'connection', connectionId: '...' }` back to VVS Client.
    *   VVS Client stores the `connectionId`.

3.  **Open Browser for Auth (VVS Client -> OS)**
    *   VVS Client constructs the login URL: `https://<web_url>/login?connection_id=<connectionId>`.
    *   VVS Client opens this URL in the default browser.

4.  **Display Login Page (Browser <- Web App)**
    *   Browser requests `/login?connection_id=...`.
    *   Web App (`apps/web/src/app/login/page.tsx`):
        *   Extracts `connectionId` from the URL search parameters.
        *   Constructs the Clerk redirect URL: `/api/auth/callback?connection_id=<connectionId>`.
        *   Renders the Clerk `<SignIn>` component with the `redirectUrl`.

5.  **User Authentication (Browser <-> Clerk)**
    *   User authenticates using Clerk interface (email/password, OAuth, etc.).
    *   Clerk manages the authentication process.

6.  **Clerk Redirect (Browser -> Web App)**
    *   Upon successful authentication, Clerk redirects to `/api/auth/callback?connection_id=<connectionId>`.

7.  **Process Auth Callback (Web App)**
    *   Web App processes request at `/api/auth/callback`.
    *   Server retrieves Clerk session data using `@repo/auth` package utilities.
    *   Gets the user profile information and JWT token.
    *   Retrieves the `connectionId` from the request URL.

8.  **Server-to-Server Communication (Web App -> WebSocket Server)**
    *   Web App makes an internal API call to the WebSocket server with the user data and `connectionId`.
    *   This uses the `@repo/auth` package to authenticate the internal request.

9.  **Send Token via WebSocket (WebSocket Server -> VVS Client)**
    *   WebSocket Server (in `apps/ws-server/`) looks up the client connection for the given `connectionId`.
    *   If found, it sends a message: `{ type: 'auth:success', token: '...', user: {...} }`.
    *   Web App redirects the browser to `/auth-success`.

10. **Handle WebSocket Message (VVS Client)**
    *   VVS Client receives the WebSocket message with authentication data.
    *   Validates the token format using the types defined in `@repo/types`.
    *   Updates internal authentication state and stores the session.

11. **Persistent Authentication (VVS Client)**
    *   For subsequent sessions, VVS Client:
        *   Establishes a WebSocket connection with the stored credentials.
        *   WebSocket Server validates the credentials using `@repo/auth`.
        *   If valid, allows the connection and sends an acknowledgment.

12. **Display Success (Browser)**
    *   Browser renders the success page informing the user they can close the window.
    *   VVS Client updates its UI to reflect the authenticated state.

Key Benefits of Monorepo Architecture:
-------------------------------------
1. **Shared Types**: Using `@repo/types` ensures consistent message formats between client and server.
2. **Modular Authentication**: `@repo/auth` package allows authentication logic to be shared.
3. **Separation of Concerns**: Web app handles user interface while WebSocket server handles persistent connections.
4. **Independent Scaling**: The WebSocket server can be deployed and scaled separately from the web application.

End of Flow. 