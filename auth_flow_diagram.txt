\
New VVS Authentication Flow (WebSocket-based)
==============================================

This diagram outlines the sequence of events for user authentication using the WebSocket communication channel between the VVS client and the coodeserver.

Components:
-----------
*   VVS Client: The Void Editor application running locally (Electron/VS Code context).
*   Browser: The user's web browser opened for authentication.
*   Server: The Next.js application running on coodeserver.
*   WebSocket Server: Integrated into the Next.js server.
*   Clerk: Third-party authentication service.
*   Supabase: Database for storing user data and temporary auth tokens.

Flow Steps:
-----------

1.  **Login Initiated (VVS Client)**
    *   User clicks "Login" in VVS.
    *   `VoidAuthService.login()` is called.

2.  **WebSocket Connection (VVS Client -> WebSocket Server)**
    *   VVS Client attempts to establish a WebSocket connection to `wss://<server_url>/api/ws`.
    *   WebSocket Server receives connection, generates a unique `connectionId`.
    *   WebSocket Server sends `{ type: 'connection', connectionId: '...' }` back to VVS Client.
    *   VVS Client stores the `connectionId`.

3.  **Open Browser for Auth (VVS Client -> OS)**
    *   VVS Client constructs the login URL: `https://<server_url>/login?connection_id=<connectionId>`.
    *   VVS Client uses `openerService` to open this URL in the default browser.

4.  **Display Login Page (Browser <- Server)**
    *   Browser requests `/login?connection_id=...`.
    *   Server (`login/page.tsx` - Client Component):
        *   Extracts `connectionId` from the URL search parameters.
        *   Constructs the Clerk redirect URL: `/api/auth/callback?connection_id=<connectionId>`.
        *   Renders the Clerk `<SignIn>` component, passing the `redirectUrl`.

5.  **User Authentication (Browser <-> Clerk)**
    *   User interacts with the Clerk sign-in form within the browser.
    *   Clerk handles the authentication process (e.g., email/password, OAuth).

6.  **Clerk Redirect (Browser -> Server)**
    *   Upon successful Clerk authentication, Clerk redirects the browser to the specified `redirectUrl`: `/api/auth/callback?connection_id=<connectionId>`.

7.  **Process Auth Callback (Server)**
    *   Server receives request at `/api/auth/callback`.
    *   `auth/callback/route.ts` (Server Route Handler):
        *   Verifies the Clerk session (`auth()`).
        *   Retrieves Clerk `userId`.
        *   Gets/Creates user record in Supabase DB (`getUser`, `createUser`).
        *   Generates a secure, short-lived `authToken`.
        *   Stores `authToken`, `userId`, and `expiresAt` in the `auth_tokens` table in Supabase (`storeAuthToken`).
        *   Retrieves the `connectionId` from the request URL.
        *   Looks up the VVS Client's WebSocket connection using the `connectionId` (`sendAuthSuccess` helper).

8.  **Send Token via WebSocket (WebSocket Server -> VVS Client)**
    *   If the WebSocket connection for the `connectionId` is found:
        *   WebSocket Server sends a message `{ type: 'auth:success', token: '...', user: {...} }` directly to the connected VVS Client.
        *   `auth/callback/route.ts` redirects the browser to `/?auth=success`.

9.  **Fallback - Token in URL (Server -> Browser - Only if WebSocket fails)**
    *   If the WebSocket connection for `connectionId` is NOT found (or if `connectionId` was missing):
        *   `auth/callback/route.ts` redirects the browser to `/?auth_token=<authToken>`. (Fallback mechanism).

10. **Handle WebSocket Message (VVS Client)**
    *   `VoidAuthService` WebSocket listener receives the `{ type: 'auth:success', ... }` message.
    *   Calls `handleAuthSuccess(token, userData)`.
    *   (Optional but current implementation) `handleAuthSuccess` makes a POST request to `/api/auth/claim-token` with the received `token`.

11. **Claim Token (VVS Client -> Server - Optional/Verification Step)**
    *   Server receives POST request at `/api/auth/claim-token`.
    *   `auth/claim-token/route.ts` (Server Route Handler):
        *   Verifies the `token` against Supabase (`verifyAndConsumeAuthToken`).
        *   If valid and not expired, consumes the token (deletes it) and retrieves the `userId`.
        *   Fetches full user details from Supabase using `userId`.
        *   Returns `{ authenticated: true, user: {...} }` to VVS Client.

12. **Update Auth State (VVS Client)**
    *   `handleAuthSuccess` (after optionally claiming token) updates the internal state: `_authStatus = { isAuthenticated: true, user: userData }`.
    *   Stores minimal session info in local storage (`AUTH_STORAGE_KEY`).
    *   Fires the `onAuthStatusChange` event to notify the UI.

13. **Display Success/Final State (Browser)**
    *   Browser renders the home page (`/`).
    *   `page.tsx` (Client Component):
        *   Checks URL parameters for `auth=success` (or `auth_token` in fallback).
        *   Displays a "Authentication successful. You can close this window..." message.

End of Flow. 